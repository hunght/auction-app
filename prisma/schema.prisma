// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  // Other user-related fields
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // User verification details
  verification Verification?
  Item         Item[]
  Bid          Bid[]
  Transaction  Transaction[]
}

model Verification {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @unique
}

// Define the Item model to store item details
model Item {
  id             Int      @id @default(autoincrement())
  name           String
  startingPrice  Float
  auctionEndTime DateTime
  status         String   @default("draft") // "draft", "published", "completed", etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation(fields: [createdById], references: [id])
  createdById    Int
  bids           Bid[] // Relationship to bids on this item

  @@index([createdById])
}

// Define the Bid model to store bids
model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int

  @@index([itemId])
  @@index([userId])
}

// Define the Transaction model to store transaction history
model Transaction {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  // Add other transaction-related fields as needed

  @@index([userId])
}
